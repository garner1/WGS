library(QDNAseq)
library(DNAcopy)
# bins <- getBinAnnotations(binSize=10, genome="hg19")
# saveRDS(bins,file = "bin_annotations_10kbp.rds")
bins <- readRDS("bin_annotations_100kbp.rds")
files <- list.files(path="/home/garner1/Work/dataset/WGS", pattern = "\\.bam$", full.names=T, recursive=FALSE)
for (x in files){
readCounts <- binReadCounts(bins,bamfiles=x)
readCountsFiltered <- applyFilters(readCounts,residual=TRUE, blacklist=TRUE)
readCountsFiltered <- estimateCorrection(readCountsFiltered)
copyNumbers <- correctBins(readCountsFiltered)
copyNumbersNormalized <- normalizeBins(copyNumbers)
copyNumbersSmooth <- smoothOutlierBins(copyNumbersNormalized)
copyNumbersSegmented <- segmentBins(copyNumbersSmooth, transformFun="sqrt",smoothBy = 1L)
copyNumbersSegmented <- normalizeSegmentedBins(copyNumbersSegmented)
copyNumbersCalled <- callBins(copyNumbersSegmented,method = "cutoff")
filename<- paste(x, ".png", sep="")
png(filename=filename)
plot(copyNumbersCalled)
dev.off()
filename <- paste(x,".bed", sep="")
exportBins(copyNumbersSegmented, filename, format = "bed")
exportBins(copyNumbersCalled, format="vcf")
filename <- paste(x,".bed", sep="")
exportBins(copyNumbersCalled, filename, type = "segments", format="tsv")
}
# bins <- getBinAnnotations(binSize=10, genome="hg19")
# saveRDS(bins,file = "bin_annotations_10kbp.rds")
bins <- readRDS("bin_annotations_100kbp.rds")
bins <- getBinAnnotations(binSize=100, genome="hg19")
saveRDS(bins,file = "bin_annotations_100kbp.rds")
# bins <- getBinAnnotations(binSize=100, genome="hg19")
# saveRDS(bins,file = "bin_annotations_100kbp.rds")
bins <- readRDS("bin_annotations_100kbp.rds")
files <- list.files(path="/home/garner1/Work/dataset/WGS", pattern = "\\.bam$", full.names=T, recursive=FALSE)
for (x in files){
readCounts <- binReadCounts(bins,bamfiles=x)
readCountsFiltered <- applyFilters(readCounts,residual=TRUE, blacklist=TRUE)
readCountsFiltered <- estimateCorrection(readCountsFiltered)
copyNumbers <- correctBins(readCountsFiltered)
copyNumbersNormalized <- normalizeBins(copyNumbers)
copyNumbersSmooth <- smoothOutlierBins(copyNumbersNormalized)
copyNumbersSegmented <- segmentBins(copyNumbersSmooth, transformFun="sqrt",smoothBy = 1L)
copyNumbersSegmented <- normalizeSegmentedBins(copyNumbersSegmented)
copyNumbersCalled <- callBins(copyNumbersSegmented,method = "cutoff")
filename<- paste(x, ".png", sep="")
png(filename=filename)
plot(copyNumbersCalled)
dev.off()
filename <- paste(x,".bed", sep="")
exportBins(copyNumbersSegmented, filename, format = "bed")
exportBins(copyNumbersCalled, format="vcf")
filename <- paste(x,".bed", sep="")
exportBins(copyNumbersCalled, filename, type = "segments", format="tsv")
}
